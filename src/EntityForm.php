<?php

namespace Davidzc\Formgen;

use Davidzc\Formgen\EntityFormField;
use Exception;

class EntityForm
{
    public $method;
    public $action;
    public $information;
    public $formFields;
    public $exampleFields;
    
    public function __construct($method = '', $action = '') {
        $this->setAttr('method',$method ?: 'GET');
        $this->setAttr('action',$action ?: '');
        $this->setAttr('formFields',collect([]));
        $this->setAttr('exampleFields',collect([]));
        $this->setExampleInfo();
        $this->generateExampleFields();
       
    }
    
    public function setMethod($value)
    {
        $this->setAttr('method', strtoupper($value));
        return $this;
    }
    public function setAction($value)
    {
        $this->setAttr('action', $value);
        return $this;
    }
    
    public function addFormField($name, $type = '', $elementType = '')
    {
        if(is_object($name)){
            if($name instanceof EntityFormField){
                $field = $name;
            } else {
                throw new Exception('Not valid object');
            }
        } else {
            if(empty($type) || empty($elementType)){
//            dd('idemo', $type, $elementType);
                $message = empty($type) ? '$type' : '';
                $message .= (empty($elementType) ? (empty($type) ? ' and $elementType arguments must be provided' : '$elementType argument must be provided') : ' argument must be provided');
                throw new Exception($message);
            } else {
                $field = new EntityFormField($name, $type, $elementType);
            }
        }
        $this->formFields->push($field);
        
        $this->exampleFields = collect([]);
        return $this;
    }
    
    protected function setAttr($attrName, $attrValue)
    {
        if(property_exists($this, $attrName)){
            $this->$attrName = $attrValue ?: null;
        } else {
            throw new Exception('Property doesnt exists');
        }
    }
    
    protected function setExampleInfo()
    {
        $exampleInfo =
            __('This is example form and it is generated by <b>FormableTrait</b>.<br>') . 
            __('At this point form method is GET, and action is "", also form fields are for now example fields listed below. <br>') .
            __('For changing form and adjusting it to model, trait method <b>entityForm()</b> should be overriden in model. <br>') .
            __('First initialize form: <b>$form = $this->initializeForm();</b><br>') . 
            __('To add method to form: <b>$form->addMethod("GET/POST")</b><br>') .
            __('To add action to form: <b>$form->addAction("specified action")</b><br>') .
            __('To add field to a form use: <b>$form->addFormField()</b> method<br>').
            __('<b>addFormField()</b> method accept arguments $name, $type, $elementType or only an object of <b>EntityFormField</b><br>').
            __('Overriden method <b>entityForm()</b> must have <b>return $form;</b> ')
        ;
        
        $this->information = $exampleInfo;
    }
    
    protected function generateExampleFields()
    {
        foreach(EntityFormField::AVAILABLE_FIELDS as $field){
            
            $this->exampleFields->push(EntityFormField::generateExample($field));
        }
    }
}